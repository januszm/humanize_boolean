{"name":"Humanize boolean","tagline":"Adds humanize method for true and false to return 'Yes' and 'No' respectively","body":"humanize_boolean\r\n===\r\n\r\n[![Gem Version](https://badge.fury.io/rb/humanize_boolean.png)](http://badge.fury.io/rb/humanize_boolean)\r\n\r\nAdds the humanize method for true and false to provide 'Yes' and 'No' respectively.\r\n\r\nhumanize_boolean also natively supports i18n translations too so it can be used in internationalized rails apps.\r\n\r\ni18n keys are locale.boolean.yes and locale.boolean.no\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'humanize_boolean'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install humanize_boolean\r\n\r\n## Usage\r\n\r\n    true.humanize # => \"Yes\"\r\n\r\n    false.humanize # => \"No\"\r\n\r\n### I18n internationalization support\r\n\r\ni18n internationalization is out of the scope of this document but... if you want to see it in action you can use the provided pirate locale in the test directory\r\n\r\nFirst you add the locale to the i18n load path like so:\r\n\r\n    I18n.load_path << \"test/pirate.yml\"\r\n\r\nThen you tell i18n to use the pirate locale like this:\r\n\r\n    I18n.locale = :pirate\r\n\r\nNow just use humanize and see the translated strings:\r\n\r\n    true.humanize # => \"Aye-Aye\"\r\n\r\n    false.humanize # => \"Argh\"\r\n\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}